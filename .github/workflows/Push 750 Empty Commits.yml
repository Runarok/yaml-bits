name: Push Empty Commits  # Workflow name that describes the purpose

on:
  push:
    branches:
      - main  # Trigger this workflow when changes are pushed to the 'main' branch.
  
  schedule:
    - cron: "0 * * * *"  # Schedule the workflow to run every 1 hour at the start of the hour (UTC).

  workflow_dispatch:  # Allow the workflow to be manually triggered via GitHub Actions UI.

jobs:
  push_empty_commits:
    runs-on: ubuntu-latest  # The job will run on the latest version of an Ubuntu runner.

    env:
      NUM_COMMITS: 750  # Set the number of commits you want here.

    steps:
      # Step 1: Checkout the repository to make changes
      - name: Checkout repository
        uses: actions/checkout@v3  # Use the checkout action to clone the repository.
        with:
          persist-credentials: false  # Avoid storing credentials permanently (security reason).
          fetch-depth: 0  # Fetch the entire git history, required for git operations.

      # Step 2: Set up Git identity for commits
      - name: Configure Git identity
        run: |
          git config --global user.email "RunarokHrafn@gmail.com"  # Set commit author's email.
          git config --global user.name "Runarok"  # Set commit author's name.

      # Step 3: Pull the latest changes from the remote to avoid conflicts
      - name: Pull latest changes
        run: git pull origin main  # Pull the latest changes from the 'main' branch before starting work.

      # Step 4: Create empty commits multiple times
      - name: Create empty commits multiple times
        run: |
          for i in $(seq 1 ${{ env.NUM_COMMITS }}); do
            git commit --allow-empty -m "Empty commit #$i"
          done

      # Step 6: Pull latest changes again to ensure no conflicts before pushing
      - name: Pull latest changes before push
        run: git pull origin main  # Pull the latest changes from the 'main' branch again to avoid reference locks or conflicts.

      # Step 7: Push the changes to the remote repository
      - name: Push changes to remote
        uses: ad-m/github-push-action@master  # Use the GitHub push action to push the local commits.
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}  # Use the GitHub token to authenticate and authorize the push.
