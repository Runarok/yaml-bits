name: Auto Generate and Merge PRs

on:
  schedule:
    - cron: "0 * * * *"  # Every hour
  workflow_dispatch:

jobs:
  generate_pr:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout main branch
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: main

      - name: Configure Git
        run: |
          git config user.name "Runarok"
          git config user.email "RunarokHrafn@gmail.com"

      - name: Create new branch and empty commit
        id: create_branch
        run: |
          BRANCH_NAME=auto-pr-$(date +%s)
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

          git checkout -b $BRANCH_NAME
          git commit --allow-empty -m "Empty commit to trigger PR"
          git push origin $BRANCH_NAME

      - name: Create Pull Request
        id: cpr
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          base: main
          head: ${{ steps.create_branch.outputs.branch_name }}
          title: "Auto PR - ${{ steps.create_branch.outputs.branch_name }}"
          body: "This is an automatically generated pull request."

      - name: Merge Pull Request
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = parseInt('${{ steps.cpr.outputs.pull-request-number }}');
            if (!prNumber) {
              core.setFailed("No PR number found.");
              return;
            }

            // Merge the pull request
            await github.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
              merge_method: 'merge'
            });

            // Delete the source branch
            const pr = await github.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
            });

            const branch = pr.data.head.ref;

            await github.git.deleteRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `heads/${branch}`
            });
